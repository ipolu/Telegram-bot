.env
BOT_TOKEN="—Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
ADMIN_ID=id —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
MAIN_DIRECTORY_PATH="./sonya_bot"

config.py
from dotenv import load_dotenv
import os

dotenv_path = os.path.join(os.path.dirname(__file__), ".env")

if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

BOT_TOKEN = os.environ["BOT_TOKEN"]
MAIN_DIR = os.environ["MAIN_DIRECTORY_PATH"]
ADMIN_ID = os.environ["ADMIN_ID"]

handlers.py
from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import Command

from aiogram import flags
from aiogram.fsm.context import FSMContext
from aiogram.types.callback_query import CallbackQuery
from aiogram.types.input_file import FSInputFile
from aiogram.methods.send_message import SendMessage

import kb
from states import General
from text import texts
from utils import _check_application, is_applicated, split_and_combaine_msg
from config import MAIN_DIR, ADMIN_ID


router = Router()


@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer(texts["start"], reply_markup=kb.start)


@router.callback_query(F.data == "to_main")
async def to_main(cb: CallbackQuery, state: FSMContext):
    await state.set_state(General.main)
    await cb.message.delete()
    await cb.message.answer(texts["to_main"], reply_markup=kb.start)


@router.callback_query(F.data == "application")
async def to_main(cb: CallbackQuery, state: FSMContext):
    await state.set_state(General.application)
    await cb.message.delete()
    await cb.message.answer(texts["application"], reply_markup=kb.to_main)


@router.callback_query(F.data == "schema")
async def to_main(cb: CallbackQuery, state: FSMContext):
    await state.set_state(General.schema)
    await cb.message.delete()
    await cb.message.answer(texts["schema"], reply_markup=kb.to_main)


@router.callback_query(F.data == "about")
async def to_main(cb: CallbackQuery, state: FSMContext):
    await state.set_state(General.about)
    await cb.message.delete()
    await cb.message.answer(texts["about"], reply_markup=kb.to_main)


@router.callback_query(F.data == "catalog")
async def to_main(cb: CallbackQuery, state: FSMContext):
    await state.set_state(General.catalog)
    await cb.message.delete()
    file = FSInputFile(f"{MAIN_DIR}/catalog.xlsx")
    await cb.message.answer_document(
        file, caption=texts["catalog"], reply_markup=kb.to_main
    )


@router.callback_query(F.data == "contacts")
async def to_main(cb: CallbackQuery, state: FSMContext):
    await state.set_state(General.contacts)
    await cb.message.delete()
    await cb.message.answer(texts["contacts"], reply_markup=kb.to_main)


@router.callback_query(F.data == "app_confirm")
async def to_main(cb: CallbackQuery, state: FSMContext):
    await state.set_state(General.app_confirm)
    out = split_and_combaine_msg(
        cb.message.text, cb.message.chat.username, cb.message.chat.id
    )
    await cb.message.delete()
    await cb.message.answer(texts["app_confirm"], reply_markup=kb.app_confirm)
    return SendMessage(chat_id=ADMIN_ID, text=out)


@router.callback_query(F.data == "close_time")
async def to_main(cb: CallbackQuery, state: FSMContext):
    await state.set_state(General.close_time)
    await cb.message.delete()
    await cb.message.answer(texts["close_time"], reply_markup=kb.to_main)


@router.callback_query(F.data == "2_3_months")
async def to_main(cb: CallbackQuery, state: FSMContext):
    await state.set_state(General.monts)
    await cb.message.delete()
    await cb.message.answer(texts["contacts"], reply_markup=kb.to_main)


@router.callback_query(F.data == "just_info")
async def to_main(cb: CallbackQuery, state: FSMContext):
    await state.set_state(General.catalog)
    await cb.message.delete()
    file = FSInputFile(f"{MAIN_DIR}/catalog.xlsx")
    await cb.message.answer_document(
        file, caption=texts["catalog"], reply_markup=kb.to_main
    )


@router.message(General.application)
async def check_application(msg: Message):
    if is_applicated(msg.text) == False:
        await msg.answer(texts["bad_input"], reply_markup=kb.to_main)
    else:
        out = _check_application(msg.text)
        await msg.answer(out, reply_markup=kb.check_application)

kb.py
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)

_IKB = InlineKeyboardButton
_IKM = InlineKeyboardMarkup

_start = [
    [
        _IKB(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="application"),
    ],
    [
        _IKB(text="–°—Ö–µ–º–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ", callback_data="schema"),
    ],
    [
        _IKB(text="–û –ö–æ–º–ø–∞–Ω–∏–∏", callback_data="about"),
    ],
    [
        _IKB(text="–ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ", callback_data="catalog"),
    ],
    [
        _IKB(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
    ],
]
start = _IKM(inline_keyboard=_start)

_check_application = [
    [
        _IKB(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="app_confirm"),
    ],
    [
        _IKB(text="<< –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"),
    ],
]
check_application = _IKM(inline_keyboard=_check_application)

_app_confirm = [
    [
        _IKB(text="–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", callback_data="close_time"),
    ],
    [
        _IKB(text="–í —Ç–µ—á–µ–Ω–∏–µ 2-3 –º–µ—Å—è—Ü–µ–≤", callback_data="2_3_months"),
    ],
    [
        _IKB(text="–ü—Ä–æ—Å—Ç–æ —É–∑–Ω–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="just_info"),
    ],
    [
        _IKB(text="<< –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"),
    ],
]
app_confirm = _IKM(inline_keyboard=_app_confirm)

_to_main = [
    [
        _IKB(text="<< –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"),
    ],
]
to_main = _IKM(inline_keyboard=_to_main)

main.py
from aiogram import Bot, Dispatcher
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import logging


from config import BOT_TOKEN, MAIN_DIR
from handlers import router


async def main():
    bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(
        bot,
        allowed_updates=dp.resolve_used_update_types(),
    )


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, filename=f"{MAIN_DIR}/logging.log")
    asyncio.run(main())

states.py
from aiogram.fsm.state import StatesGroup, State


class General(StatesGroup):
    main = State()
    application = State()
    schema = State()
    about = State()
    application = State()
    catalog = State()
    contacts = State()
    app_confirm = State()
    close_time = State()
    monts = State()
    just_info = State()

text.py
from aiogram.utils.markdown import hlink

texts = {
    "start": f"–ê–≤—Ç–æ –∏–∑ –û–ê–≠, –ö–æ—Ä–µ–∏ –∏ –ö–∏—Ç–∞—è ‚Äú–ø–æ–¥ –∫–ª—é—á‚Äù –Ω–∞ 20-25% –Ω–∏–∂–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞üëå\n\n–õ–µ–≥–∞–ª—å–Ω–æ, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ (—Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É), –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æüôå\n\n{hlink('–°–∞–π—Ç', 'https://whaleauto.bitrix24site.ru/')}\n\n{hlink('–ß–∞—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤', 'https://t.me/AUTO_Emirates_ru')}",
    "about": "–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è Whale Auto –æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ–¥–±–æ—Ä–∞, –ø–æ–∫—É–ø–∫–∏, —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –†–æ—Å—Å–∏—é ¬´–ø–æ–¥ –∫–ª—é—á¬ª, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ 15-20% –Ω–∏–∂–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞. –†–∞–±–æ—Ç–∞–µ–º –ª–µ–≥–∞–ª—å–Ω–æ, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ (–ø–æ –¥–æ–≥–æ–≤–æ—Ä—É).",
    "schema": "–®–∞–≥1.–ú—ã –ø–æ–ª—É—á–∞–µ–º –æ—Ç –í–∞—Å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –≤ –∫–æ—Ç–æ—Ä—ã–º –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–º–∞—Ä–∫–∞, —Å—É–º–º–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –≥–æ–¥ –∏ —Ç.–¥.)\n–®–∞–≥2.–ú—ã –¥–µ–ª–∞–µ–º –ø–æ–¥–±–æ—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –í–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–Ω–∞–ª–æ–≥–æ–≤, —Ñ–æ—Ç–æ, —Ü–µ–Ω—ã, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ —Ç.–¥. –î–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π, –í–∞–º –±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ –∏–∑ —á–µ–≥–æ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ.\n–®–∞–≥3.–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º, –∑–∞–∫–ª—é—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ –¥–ª—è –í–∞—Å. –í –Ω–µ–≥–æ –≤—Ö–æ–¥–∏—Ç: –¥–æ—Å—Ç–∞–≤–∫–∞, —Ç—é–Ω–∏–Ω–≥ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é), –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ä–∞—Å—á—ë—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.\n–®–∞–≥4.–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥ –≤ —Ä–∞–∑–º–µ—Ä–µ 3000$. –í–æ–∑–º–æ–∂–Ω–∞ –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω–∞—è, —Ç–∞–∫ –∏ –ø–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –û–ê–≠). –ü—Ä–∏ –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –±—É–¥–µ—Ç –≤–ª–∏—è—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞.\n–®–∞–≥5.–í—ã–µ–∑–¥ –Ω–∞—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –≤ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å –í–∞–º–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –ø—Ä. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –í–∞–º–∏ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –≤ –û–ê–≠, –ö–∏—Ç–∞–µ –∏–ª–∏ –ö–æ—Ä–µ–∏.\n–®–∞–≥6.–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ –ø–æ—Ä—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –µ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ.\n–®–∞–≥7.–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É.\n–®–∞–≥8.–ü–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –≤ –ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏, –∏ –¥–∞–ª–µ–µ –º—ã –∑–∞–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –µ–≥–æ –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n–®–∞–≥9.–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –ª—é–±–æ–π –≥–æ—Ä–æ–¥ –†–æ—Å—Å–∏–∏.",
    "application": "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ\n–ú–æ–¥–µ–ª—å –¢–°\n–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –¢–°\n–¢–∏–ø –ø—Ä–∏–≤–æ–¥–∞\n–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞\n–ü—Ä–æ–±–µ–≥\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞\n–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç",
    "app_confirm": "–í—ã–±–µ—Ä–µ—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ",
    "close_time": "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–Ω—É:\n89171500009 (–í–∞–¥–∏–º)",
    "contacts": f"{hlink('–°–∞–π—Ç', 'https://whaleauto.bitrix24site.ru/')}\n{hlink('–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', 'https://vk.com/avtoizoaekoreikitay')}\n{hlink('Telegram', 'https://t.me/avtoemirates')}\n–¢–µ–ª–µ—Ñ–æ–Ω: 89171500009 –í–∞–¥–∏–º",
    "catalog": "–í—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞—Ç–∞–ª–æ–≥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:",
    "bad_input": "–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ",
    "to_main": "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?",
}

utils.py
def is_applicated(text: str):
    lines = text.split("\n")
    if len(lines) < 8:
        return False
    elif len(lines) > 8:
        return False
    return True


def _check_application(text: str):
    lines = text.split("\n")
    out_str = f"–í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ: {lines[0]}\n–ú–æ–¥–µ–ª—å –¢–°: {lines[1]}\n–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –¢–°: {lines[2]}\n–¢–∏–ø –ø—Ä–∏–≤–æ–¥–∞: {lines[3]}\n–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {lines[4]}\n–ü—Ä–æ–±–µ–≥: {lines[5]}\n–ì–æ–¥ –≤—ã–ø—É—Å–∫: {lines[6]}\n–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç: {lines[7]}\n\n–ï—Å–ª–∏ –í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞ –≤ —Ç–∞–∫–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ"
    return out_str


def split_and_combaine_msg(text: str, user_name: str, user_id: int):
    text = text.replace("–í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:", "")
    text = text.replace(
        "–ï—Å–ª–∏ –í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞ –≤ —Ç–∞–∫–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ", ""
    )
    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} ({user_id}) –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º:{text}"
    return text
